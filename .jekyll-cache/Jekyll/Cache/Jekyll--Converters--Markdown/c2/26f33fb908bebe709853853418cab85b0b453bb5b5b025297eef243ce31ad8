I"j<p>Same site cookies (<em>First-Part-Only</em>) to stworzony kilka lat temu mechanizm, który pozwala na zmniejszenie ryzyka ataków typu CSRF.
Zapewnia on, że dane ciasteczko może być wysyłane wyłącznie z żądaniami zainicjowanymi z domeny, dla której zostało zarejestrowane. 
Dokładniejszy opis znajdziesz pod tym adresem: <span class="no-breaking-word"><a href="https://web.dev/samesite-cookies-explained/">https://web.dev/samesite-cookies-explained/</a></span>.</p>

<h2 id="skoro-atrybut-samesite-istnieje-tak-długo-dlaczego-nagle-stał-się-dla-mnie-ważny">Skoro atrybut SameSite istnieje tak długo dlaczego nagle stał się dla mnie ważny?</h2>

<p>W maju 2019 twórcy przegladarki Chrome zapowiedzieli, że od wersji 80 (planowana wersja wydania to <strong>4 lutego 2020</strong>) dla wszystkich ciasteczek, które nie mają zdefiniowanego atrybutu <em>SameSite</em> domyślnie zostanie przyjęta wartość <em>Lax</em>. Mozilla i Microsoft również wyraziły chęć wprowadzenia tej zmiany we własnych przeglądarkach, więc możemy się spodziewać, że w nieodległej przyszłości takie zachowanie zostanie również zaimplementowane w Firefoxie i Edge’u.
W praktyce oznacza to, że ciasteczka które nie będą miały jawnie zdefiniowanego atrybutu <em>SameSite</em> nie będą wysyłane przy próbach żądań typu cross-site. Wyjątkiem od tej zasady będzie przypadek gdy użyjemy bezpiecznej metody HTTP (<em>GET</em>, <em>HEAD</em>, <em>OPTIONS</em>, <em>TRACE</em>) a wykonanie żądania będzie skutkowało tzw. <em>top-level navigation</em> (zmiana adresu w pasku przeglądarki).</p>

<h2 id="jak-sprawdzić-czy-ta-zmiana-dotyczy-mnie">Jak sprawdzić czy ta zmiana dotyczy mnie?</h2>
<p>Jednym z najprostszych sposobów jest zajrzenie do narzędzi developerskich przeglądarki. Od wersji 77 przeglądarka Chrome, w przypadku problematycznych żądań, wyświetla w konsoli ostrzeżenie o następującej treści (jeżeli zauważyłeś takie ostrzeżenie w swoim systemie, będziesz musiał podjąć jakąś akcję):</p>

<p><code class="language-plaintext highlighter-rouge">A cookie associated with a cross-site resource at (cookie domain) was set without the SameSite attribute. A future release of Chrome will only deliver cookies with cross-site requests if they are set with SameSite=None and Secure. You can review cookies in developer tools under Application&gt;Storage&gt;Cookies and see more details at https://www.chromestatus.com/feature/5088147346030592 and https://www.chromestatus.com/feature/5633521622188032</code></p>

<p>Dodatkowo, przegladarki Chrome oraz Firefox umożliwiają ręczne włączenie opisywanego wyżej zachowania. 
W Chrome’ie należy ustawić wartość <em>Enabled</em> następujacym flagom: <em>SameSite by default cookies</em> (<em>chrome://flags/#same-site-by-default-cookies</em>) oraz <em>Cookies without SameSite must be secure</em> (<em>chrome://flags/#cookies-without-same-site-must-be-secure</em>)
W Firefoxie włączymy funkcjonalność wchodząc na adres <em>about:config</em> i ustawiając flagi <em>network.cookie.sameSite.laxByDefault</em> oraz <em>network.cookie.sameSite.noneRequiresSecure</em> na wartość <em>true</em>.</p>

<p>Weryfikując swoje systemy warto zwrócić uwagę na następujące elementy:</p>
<ul>
  <li>treści umieszczone w tagu <em>&lt;iframe&gt;</em> (w taki sposób czesto zapewniana jest integracja z systemami zapewniajacymi mapy, video, kontrolki do płatności, kalendarze itp),</li>
  <li>zewnętrzne zasoby używane w naszym systemie (np: obrazki, zewnętrzne skrypty czy arkusze styli),</li>
  <li>wszelkie wejścia do twojego systemu (np: przekierowania z innych stron, publiczne usługi, formularze, które mogą być wysyłane z innych systemów),</li>
  <li>skoki do innych systemów (np: formularze płatności),</li>
  <li>wszelkie elementy wykorzystujące <em>SSO</em> (<em>single sign-on</em>).</li>
</ul>

<h2 id="jak-się-przygotować">Jak się przygotować?</h2>

<p>Niestety nie istnieje jeden prosty sposób, który rozwiąże wszystkie problemy. Jednak twórcy implementacji atrybutu <em>SameSite</em> przewidzieli ewentualne problemy
w istniejących systemach i dodali możliwość ustawienia mu wartości <em>None</em>. Takie ciasteczko będzie działało niemalże identycznie jak te przed opisywanymi zmianami -
jedyną różnicą jest konieczność zastosowania atrybutu <em>Secure</em> (w przeciwnym razie ciasteczko bedzie zawsze ignorowana przy żadaniach typu cross-site). Należy jednak pamiętać, 
że domyślne ustawienie <em>SameSite=Lax</em> zostało wprowadzone ze względów bezpieczeństwa i ustawiajac wartość atrybutu na <em>None</em> narażamy się na potencjalne ataki, więc tam
gdzie jest to możliwe powinniśmy unikać tego rozwiązania. Dodatkowo, wartość ta nie jest prawidłowo obsługiwana przez część przegladarek co może być problemem w niektórych systemach.
O części usecase’ów oraz rozwiązań możesz poczytać tutaj: <a href="https://web.dev/samesite-cookie-recipes/">https://web.dev/samesite-cookie-recipes/</a>.</p>

<h2 id="przydatne-linki">Przydatne linki</h2>

<ul>
  <li><a href="https://blog.chromium.org/2019/05/improving-privacy-and-security-on-web.html">https://blog.chromium.org/2019/05/improving-privacy-and-security-on-web.html</a></li>
  <li><a href="https://blog.chromium.org/2019/10/developers-get-ready-for-new.html">https://blog.chromium.org/2019/10/developers-get-ready-for-new.html</a></li>
  <li><a href="https://www.chromium.org/updates/same-site">https://www.chromium.org/updates/same-site</a></li>
  <li><a href="https://web.dev/samesite-cookies-explained/">https://web.dev/samesite-cookies-explained/</a></li>
  <li><a href="https://web.dev/samesite-cookie-recipes/">https://web.dev/samesite-cookie-recipes/</a></li>
  <li><a href="https://tools.ietf.org/html/draft-west-first-party-cookies-07">https://tools.ietf.org/html/draft-west-first-party-cookies-07</a></li>
  <li><a href="https://www.chromestatus.com/feature/5088147346030592">https://www.chromestatus.com/feature/5088147346030592</a></li>
  <li><a href="https://www.chromestatus.com/feature/5633521622188032">https://www.chromestatus.com/feature/5633521622188032</a></li>
</ul>
:ET