I"E)<p>W nawiązaniu do mojego poprzedniego wpisu pt.:<br />
<a href="/2020/02/01/keycloak-uwierzytelnianie-autoryzacja-springboot-angular.html"><strong>“Keycloak - uwierzytelnianie i autoryzacja użytkownika w aplikacji Angular/Spring Boot”</strong> 🔗</a><br />
chciałbym krótko opisać standard <a href="https://openid.net/connect/">OpenID Connect</a>, który został wykorzystany podczas logowania do aplikacji przy użyciu serwera uwierzytelniania <a href="https://www.keycloak.org/">Keycloak</a>.</p>

<h2 id="wstęp">Wstęp</h2>

<p>Najpopularniejszymi standardami wykorzystywanymi do uwierzytelniania/autoryzacji są <code class="language-plaintext highlighter-rouge">OAuth 2.0</code>, <code class="language-plaintext highlighter-rouge">OpenID Connect</code> oraz <code class="language-plaintext highlighter-rouge">SAML</code>.<br />
O OAuth 2.0 zostało już napisanych wiele artykułów, których nie ma sensu powielać. Jednak aby przedstawić OpenID Connect, musiałbym opisać <a href="https://oauth.net/2/">OAuth 2.0</a> oraz <a href="https://jwt.io/">JWT</a>.</p>

<p>W celu zapoznania się ze standardem OAuth 2.0 odeślę do artykułu pt.:<br />
<a href="https://sekurak.pl/oauth-2-0-jak-dziala-jak-testowac-problemy-bezpieczenstwa/"><strong>“OAuth 2.0 – jak działa / jak testować / problemy bezpieczeństwa”</strong> 🔗</a><br />
autorstwa Marcina Pioska z portalu <a href="https://sekurak.pl/">Sekurak</a>, w którym została opisana terminologia, sposoby pozyskiwania tokenu oraz zasada działania standardu.</p>

<p>O JWT natomiast możemy przeczytać w dokumencie <a href="https://tools.ietf.org/html/rfc7519">RFC7519</a>.</p>

<p>Dlaczego więc do integracji naszej aplikacji z serwerem uwierzytelniania Keycloak użyliśmy OpenID Connect?</p>

<h2 id="uwierzytelnianie-a-autoryzacja">Uwierzytelnianie a autoryzacja</h2>

<p>Poruszając temat zabezpieczania zasobów i dostępu do nich, mówimy o takich pojęciach jak <strong>uwierzytelnianie</strong> (ang. authentication) oraz <strong>autoryzacja</strong> (ang. authorization).</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">uwierzytelnianie</code> to proces polegający na potwierdzeniu tożsamości, czyli w skrócie - <em>kim jestem?</em>;</li>
  <li><code class="language-plaintext highlighter-rouge">autoryzacja</code> to proces nadawania uprawnień (dostępu do zasobu), czyli w skrócie - <em>co mogę zrobić?</em>.</li>
</ul>

<p>OAuth 2.0, według oficjalnej dokumentacji, nie powinien służyć do uwierzytelniania, a jedynie do autoryzacji (<a href="https://oauth.net/articles/authentication/">źródło 🔗</a>):</p>
<blockquote>
  <p>OAuth 2.0 is not an authentication protocol.</p>
</blockquote>

<p>Jeśli potrzebujemy mechanizmu pozwalającego na poprawne zaimplementowanie uwierzytelniania, z pomocą przychodzi OpenID Connect.</p>

<h2 id="openid-connect">OpenID Connect</h2>

<p>OpenID Connect jest prostą warstwą tożsamości opartą na OAuth 2.0.<br />
Umożliwia klientom weryfikację tożsamości użytkownika końcowego na podstawie uwierzytelnienia przeprowadzonego przez serwer autoryzacji, a także uzyskanie podstawowych informacji o jego profilu. Rozszerza OAuth 2.0, umożliwiając <strong>uwierzytelnianie stowarzyszone</strong> (ang. federated authentication):</p>

<ul>
  <li><strong>Federated Authentication</strong> - użytkownik loguje się do serwisu Spotify przy użyciu konta na portalu Facebook (<code class="language-plaintext highlighter-rouge">OpenID Connect</code>);</li>
  <li><strong>Delegated Authorization</strong> - Spotify próbuje uzyskać dostęp do listy znajomych na Facebooku, aby zaimportować ją do swojej bazy danych (<code class="language-plaintext highlighter-rouge">OAuth 2.0</code>).</li>
</ul>

<p>Przepływ procesu jest podobny do OAuth 2.0, ale dodatkowo w procesie bierze udział <strong>ID Token</strong>.</p>

<h2 id="id-token">ID Token</h2>

<p>ID Token przypomina koncepcję dowodu osobistego w formacie JWT, podpisanego przez dostawcę OpenID (OP). Spełnia założenia standardu JWT, więc składa się z nagłówka, zawartości oraz
sygnatury. Jego zawartość może więc wyglądać następująco:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"jti"</span><span class="p">:</span><span class="w"> </span><span class="s2">"e78b5f41-e769-4353-8874-44302f4a17c3"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"exp"</span><span class="p">:</span><span class="w"> </span><span class="mi">1583205992</span><span class="p">,</span><span class="w">
  </span><span class="nl">"nbf"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"iat"</span><span class="p">:</span><span class="w"> </span><span class="mi">1583169992</span><span class="p">,</span><span class="w">
  </span><span class="nl">"iss"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8180/auth/realms/SpringBootAngular"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"aud"</span><span class="p">:</span><span class="w"> </span><span class="s2">"developer"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sub"</span><span class="p">:</span><span class="w"> </span><span class="s2">"c3c3755a-e499-4782-b119-a19bede0ace8"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"typ"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Serialized-ID"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"nonce"</span><span class="p">:</span><span class="w"> </span><span class="s2">"02c0b033-bfac-4030-a317-c18aec3cb2db"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"auth_time"</span><span class="p">:</span><span class="w"> </span><span class="mi">1583169991</span><span class="p">,</span><span class="w">
  </span><span class="nl">"acr"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"session_state"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8b66127b-4474-41bd-8e36-5d18286df73f"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"state_checker"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HZZmC4no-TEqiCf31Mk1MtONDqyxkk81ZXZCwANQb9Y"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Jan Nowak"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"email"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jan.nowak@example.pl"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>W skrócie, ID Token m.in.:</strong></p>

<ul>
  <li>potwierdza tożsamość użytkownika, zwanego podmiotem w OpenID (<code class="language-plaintext highlighter-rouge">sub</code>);</li>
  <li>określa organ wydający (<code class="language-plaintext highlighter-rouge">iss</code>);</li>
  <li>jest generowany dla określonej grupy odbiorców - klienta (<code class="language-plaintext highlighter-rouge">aud</code>);</li>
  <li>może zawierać losowy ciąg służący do identyfikowania pochodzenia żądania (<code class="language-plaintext highlighter-rouge">nonce</code>);</li>
  <li>może określać kiedy (<code class="language-plaintext highlighter-rouge">auth time</code>) i jak, pod względem siły (<code class="language-plaintext highlighter-rouge">acr</code>) użytkownik został uwierzytelniony;</li>
  <li>posiada znacznik czasu wydania (<code class="language-plaintext highlighter-rouge">iat</code>) oraz czas ważności (<code class="language-plaintext highlighter-rouge">exp</code>);</li>
  <li>może zawierać dodatkowe informacje takie jak imię, nazwisko (<code class="language-plaintext highlighter-rouge">name</code>) oraz adres email (<code class="language-plaintext highlighter-rouge">email</code>);</li>
  <li>jest podpisany cyfrowo, dzięki czemu może zostać zweryfikowany;</li>
  <li>opcjonalnie może zostać zaszyfrowany w celu zapewnienia poufności danych.</li>
</ul>

<p>Więcej informacji na ten temat znajdziemy w <a href="https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken">oficjalnej dokumentacji 🔗</a>.</p>

<h2 id="podsumowanie">Podsumowanie</h2>

<p>Dzięki wykorzystaniu <code class="language-plaintext highlighter-rouge">ID Token</code>, OpenID Connect nadaje się do uwierzytelniania użytkownika, w przeciwieństwie do OAuth 2.0, który najlepiej sprawdzi się podczas autoryzacji dwóch aplikacji komunikujących się między sobą przez API.</p>

<p>Wiemy już, że Federated Authentication ma zastosowanie, kiedy użytkownik loguje się do serwisu przy użyciu wspólnego konta.<br />
OpenID Connect wydaje się więc być naturalnym kandydatem do uwierzytelniania użytkowników w różnego rodzaju serwisach społecznościowych czy aplikacjach internetowych (<a href="/2020/02/01/keycloak-uwierzytelnianie-autoryzacja-springboot-angular.html">jak w przykładzie logowania do aplikacji za pośrednictwem Keycloaka</a>).</p>

<p>Delegated Authorization natomiast ma zastosowanie, kiedy klient (aplikacja) próbuje uzyskać dostęp do zasobów innej aplikacji. Użytkownik musi jedynie zaakceptować uprawnienia przyznawane aplikacji klienckiej, czyli np. odczyt listy znajomych na Facebooku, o który ubiega się Spotify.<br />
Tutaj do autoryzacji Spotify w Facebooku najlepiej spisze się OAuth 2.0.</p>

<p><strong>Standardy wymienione we wstępie można podsumować następująco:</strong></p>

<ul>
  <li><strong>OAuth 2.0</strong> - stworzony w 2006 roku przy współpracy Twittera i Google, otwarty standard autoryzacji oparty o format JSON. Główne zastosowanie to autoryzacja API między dwoma aplikacjami;</li>
  <li><strong>OpenID Connect 1.0</strong> - stworzony w 2014 roku przez OpenID Foundation, otwarty standard uwierzytelniania oparty o format JSON. Główne zastosowanie to SSO dla aplikacji konsumenckich;</li>
  <li><strong>SAML 2.0</strong> - stworzony w 2001 roku przez OASIS, otwarty standard autoryzacji i uwierzytelniania oparty o format XML. Główne zastosowanie to SSO dla aplikacji enterprise.</li>
</ul>
:ET