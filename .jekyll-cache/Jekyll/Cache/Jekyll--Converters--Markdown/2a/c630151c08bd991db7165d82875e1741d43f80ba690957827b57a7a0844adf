I""§<p>Jak wykorzystaÄ‡ serwer Keycloak do logowania w aplikacji?<br />
OmÃ³wimy to na przykÅ‚adzie gotowego projektu, ktÃ³ry umoÅ¼liwia uÅ¼ytkownikowi zalogowanie siÄ™ do aplikacji z poziomu przeglÄ…darki internetowej.</p>

<h2 id="czym-jest-keycloak">Czym jest Keycloak?</h2>

<p>Keycloak to serwer uwierzytelniania i autoryzacji na licencji open-source. MoÅ¼e zostaÄ‡ podÅ‚Ä…czony do LDAP/AD lub uwierzytelniaÄ‡ uÅ¼ytkownikÃ³w przy uÅ¼yciu Google, Facebooka itd.
Posiada rÃ³wnieÅ¼ konsolÄ™ administracyjnÄ…, w ktÃ³rej moÅ¼emy Å‚atwo skonfigurowaÄ‡ chociaÅ¼by uprawnienia uÅ¼ytkownikÃ³w.</p>

<p>WiÄ™cej informacji na stronie <a href="https://www.keycloak.org/">www.keycloak.org</a>.</p>

<h2 id="projekt-demo">Projekt demo</h2>

<p>Projekt aplikacji znajdujÄ™ siÄ™ na GitHubie - <a href="https://github.com/Michuu93/spring-angular-keycloak">link do repozytorium.</a><br />
SkÅ‚ada siÄ™ on z aplikacji backendowej napisanej w Spring Boot (Kotlin) oraz frontendowej napisanej w Angular 8.</p>

<p>Aby przedstawiÄ‡ sposÃ³b zaimplementowania uwierzytelniania uÅ¼ytkownika za pomocÄ… serwera Keycloak, zabezpieczymy endpointy na backendzie oraz osobno czÄ™Å›Ä‡ frontendowÄ….</p>

<h3 id="serwer-keycloak">Serwer Keycloak</h3>

<p>Wykorzystamy serwer Keycloak uruchomiony na Dockerze. WykonujÄ…c w gÅ‚Ã³wnym folderze repozytorium polecenie:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="nt">--name</span> keycloak-server <span class="nt">-p</span> 8180:8080 <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">KEYCLOAK_USER</span><span class="o">=</span>admin <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">KEYCLOAK_PASSWORD</span><span class="o">=</span>admin <span class="se">\</span>
    <span class="nt">-e</span> <span class="nv">KEYCLOAK_IMPORT</span><span class="o">=</span>/realm/realm-export.json <span class="se">\</span>
    <span class="nt">-v</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/realm/:/realm/ <span class="se">\</span>
    jboss/keycloak
</code></pre></div></div>

<p>uruchomimy serwer Keycloak na porcie <code class="language-plaintext highlighter-rouge">8180</code>.</p>

<p>Konsola administracyjna bÄ™dzie dostÄ™pna pod adresem: <a href="http://127.0.0.1:8180/auth/admin/">127.0.0.1:8180/auth/admin</a><br />
Zalogujemy siÄ™ do niej przy uÅ¼yciu loginu i hasÅ‚a zdefiniowanego w <code class="language-plaintext highlighter-rouge">KEYCLOAK_USER</code> oraz <code class="language-plaintext highlighter-rouge">KEYCLOAK_PASSWORD</code>, w naszym przypadku <code class="language-plaintext highlighter-rouge">admin:admin</code>.</p>

<h4 id="konfiguracja-serwera">Konfiguracja serwera</h4>

<p>Sama konfiguracja serwera Keycloak, to temat na osobny wpis, dlatego wykorzystamy przygotowanÄ… wczeÅ›niej konfiguracjÄ™.</p>

<p>Eksport konfiguracji serwera zostaÅ‚ umieszczony w repozytorium projektu demo (<code class="language-plaintext highlighter-rouge">realm/realm-export.json</code>) i zostanie zaÅ‚adowany podczas uruchomienia serwera.</p>

<p><strong>Skonfigurowane zostaÅ‚y:</strong></p>

<ul>
  <li>realm <code class="language-plaintext highlighter-rouge">SpringBootAngular</code></li>
  <li>client <code class="language-plaintext highlighter-rouge">SpringBootAngularClient</code>
    <ul>
      <li>Access Type: <code class="language-plaintext highlighter-rouge">confidential</code> - podczas logowania musimy przekazaÄ‡ secret skonfigurowany w <code class="language-plaintext highlighter-rouge">SpringBootAngularClient</code>
        <ul>
          <li>dostÄ™pnÄ™ sÄ… jeszcze opcje <code class="language-plaintext highlighter-rouge">bearer-only</code> oraz <code class="language-plaintext highlighter-rouge">public</code> - wiÄ™cej na ten temat w dokumentacji <a href="https://www.keycloak.org/docs/latest/server_admin/#oidc-clients">(link)</a></li>
        </ul>
      </li>
      <li>Valid Redirect URIs: <code class="language-plaintext highlighter-rouge">*</code> - dla uÅ‚atwienia bez ograniczeÅ„</li>
      <li>Web Origins: <code class="language-plaintext highlighter-rouge">*</code> - dla uÅ‚atwienia bez ograniczeÅ„</li>
    </ul>
  </li>
  <li>rola <code class="language-plaintext highlighter-rouge">user_role</code> - tylko uÅ¼ytkownik z tÄ… rolÄ… bÄ™dzie mÃ³gÅ‚ siÄ™ autoryzowaÄ‡ w aplikacjach</li>
  <li>uÅ¼ytkownik <code class="language-plaintext highlighter-rouge">user</code> z rolÄ… <code class="language-plaintext highlighter-rouge">user_role</code> (<code class="language-plaintext highlighter-rouge">user:password</code>)</li>
  <li>uÅ¼ytkownik <code class="language-plaintext highlighter-rouge">user2</code> bez roli <code class="language-plaintext highlighter-rouge">user_role</code> (<code class="language-plaintext highlighter-rouge">user2:password2</code>)</li>
</ul>

<h3 id="aplikacja-backendowa">Aplikacja backendowa</h3>

<p>Aplikacja backendowa skÅ‚ada siÄ™ z dwÃ³ch kontrolerÃ³w:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MainController</code> - wystawia zabezpieczone endpointy
    <ul>
      <li><code class="language-plaintext highlighter-rouge">/api/hello</code> - zwraca string <code class="language-plaintext highlighter-rouge">Hello from the Backend!</code></li>
      <li><code class="language-plaintext highlighter-rouge">/api/logout</code> - wylogowuje nas po stronie aplikacji backendowej</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">KeycloakController</code> - wystawia publiczny endpoint
    <ul>
      <li><code class="language-plaintext highlighter-rouge">api/keycloak/config</code> - udostÄ™pnia wspÃ³lnÄ… konfiguracjÄ™ dla frontendu</li>
    </ul>
  </li>
</ul>

<h3 id="aplikacja-frontendowa">Aplikacja frontendowa</h3>

<p>Aplikacja frontendowa skÅ‚ada siÄ™ z trzech komponentÃ³w:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PublicComponent</code> - dostÄ™pny dla wszystkich bez logowania</li>
  <li><code class="language-plaintext highlighter-rouge">ProtectedComponent</code> - zabezpieczony przed nieautoryzowanym uÅ¼ytkownikiem</li>
  <li><code class="language-plaintext highlighter-rouge">ToolbarComponent</code> - menu z przyciskami dla wygody</li>
</ul>

<h2 id="uwierzytelnianie-na-backendzie">Uwierzytelnianie na backendzie</h2>

<h3 id="zaleÅ¼noÅ›ci">ZaleÅ¼noÅ›ci</h3>

<p>Na backendzie wykorzystamy zaleÅ¼noÅ›ci:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">org.keycloak:keycloak-adapter-core</code></li>
  <li><code class="language-plaintext highlighter-rouge">org.keycloak:keycloak-spring-boot-2-adapter</code></li>
  <li><code class="language-plaintext highlighter-rouge">org.keycloak:keycloak-tomcat-adapter</code></li>
</ul>

<p>MoglibyÅ›my wykorzystaÄ‡ jednÄ… zaleÅ¼noÅ›Ä‡, zawierajÄ…cÄ… powyÅ¼sze adaptery:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">org.keycloak:keycloak-spring-boot-2-starter</code></li>
</ul>

<p>jednak w najnowszej dostÄ™pnej wersji <code class="language-plaintext highlighter-rouge">4.0.0.Final</code> uÅ¼ywa starszych wersji adapterÃ³w. JednÄ… ze zmian w nowszych wersjach adapterÃ³w, jest poprawiona walidacja tokenÃ³w. JeÅ›li w przyszÅ‚oÅ›ci pojawi siÄ™ nowa wersja zaleÅ¼noÅ›ci, z poprawionymi adapterami, to nic nie bÄ™dzie staÅ‚o na przeszkodzie Å¼eby z niej skorzystaÄ‡.</p>

<h3 id="konfiguracja">Konfiguracja</h3>

<p>OprÃ³cz konfiguracji portu aplikacji oraz poziomu logowania adapterÃ³w (dziÄ™ki czemu zobaczymy w logach co siÄ™ dokÅ‚adnie dzieje), musimy skonfigurowaÄ‡ <code class="language-plaintext highlighter-rouge">keycloak-adapter-core</code>.<br />
DziÄ™ki <code class="language-plaintext highlighter-rouge">keycloak-spring-boot-2-adapter</code> moÅ¼emy wszystko skonfigurowaÄ‡ w <code class="language-plaintext highlighter-rouge">application.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">keycloakRequiredUserRole</span><span class="pi">:</span> <span class="s">user_role</span>
<span class="na">keycloak</span><span class="pi">:</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">auth-server-url</span><span class="pi">:</span> <span class="s">http://localhost:8180/auth</span>
  <span class="na">realm</span><span class="pi">:</span> <span class="s">SpringBootAngular</span>
  <span class="na">resource</span><span class="pi">:</span> <span class="s">SpringBootAngularClient</span>
  <span class="na">security-constraints</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">authRoles</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">${keycloakRequiredUserRole}</span>
      <span class="na">securityCollections</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">protected resource</span>
          <span class="na">patterns</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">/api/*</span>
    <span class="pi">-</span> <span class="na">securityCollections</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">public resource</span>
          <span class="na">patterns</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">/api/keycloak/config</span>
  <span class="na">credentials</span><span class="pi">:</span>
    <span class="na">secret</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;SECRET&gt;"</span>
  <span class="na">realm-key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;PUBLIC_KEY&gt;"</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">keycloakRequiredUserRole</code> - dla uÅ‚atwienia, poniewaÅ¼ wykorzystamy tylko jednÄ… rolÄ™, bÄ™dzie nam Å‚atwiej udostÄ™pniÄ‡ jÄ… przez api (jeÅ›li chcemy wykorzystaÄ‡ wiÄ™cej rÃ³l, to musimy je wyciÄ…gÄ…Ä‡ z listy <code class="language-plaintext highlighter-rouge">authRoles</code></li>
  <li><code class="language-plaintext highlighter-rouge">keycloak.security-constraints</code> - tutaj definiujemy ograniczenia endpointÃ³w</li>
</ul>

<p>MoÅ¼emy zdefiniowaÄ‡ Å›cieÅ¼ki dostÄ™pne publicznie:<br />
np. <code class="language-plaintext highlighter-rouge">/api/keycloak/config</code><br />
oraz Å›cieÅ¼ki ktÃ³re bÄ™dÄ… wymagaÅ‚y uprawnieÅ„<br />
np. <code class="language-plaintext highlighter-rouge">/api/*</code><br />
ktÃ³re bÄ™dzie wymagaÄ‡ od uÅ¼ytkownika roli <code class="language-plaintext highlighter-rouge">${keycloakRequiredUserRole}</code> (czyli <code class="language-plaintext highlighter-rouge">user_role</code>).</p>

<p><strong>Konfiguracja Keycloak:</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">keycloak.enabled</code> - umoÅ¼liwi nam Å‚atwe wyÅ‚Ä…czenie uwierzytelniania;</li>
  <li><code class="language-plaintext highlighter-rouge">keycloak.auth-server-url</code> - adres serwera Keycloak;</li>
  <li><code class="language-plaintext highlighter-rouge">keycloak.realm</code> - nazwa realmu;</li>
  <li><code class="language-plaintext highlighter-rouge">keycloak.resource</code> - nazwa klienta skonfigurowanego dla podanego realmu;</li>
  <li><code class="language-plaintext highlighter-rouge">keycloak.credentials.secret</code> - secret wygenerowany w <code class="language-plaintext highlighter-rouge">SpringBootAngularClient</code>, moÅ¼emy go znaleÅºÄ‡ w konsoli administracyjnej (<code class="language-plaintext highlighter-rouge">Clients &gt; SpringBootAngularClient &gt; Credentials &gt; Secret</code>);</li>
  <li><code class="language-plaintext highlighter-rouge">keycloak.realm-key</code> - klucz publiczny realmu, moÅ¼emy go znaleÅºÄ‡ w konsoli administracyjnej (<code class="language-plaintext highlighter-rouge">Realm Settings &gt; Keys &gt; Active &gt; RSA &gt; Public Key</code>).</li>
</ul>

<h3 id="wystawienie-konfiguracji-dla-frontendu">Wystawienie konfiguracji dla frontendu</h3>

<p>PoniewaÅ¼ zabezpieczamy osobno aplikacjÄ™ backendowÄ… jak i frontendowÄ…, a konfiguracja Keycloak jest taka sama, to moÅ¼emy wystawiÄ‡ konfiguracjÄ™ z <code class="language-plaintext highlighter-rouge">application.yml</code> przez api. DziÄ™ki temu unikniemy duplikowania konfiguracji w aplikacji frontendowej.</p>

<p>KonfiguracjÄ™ wystawimy w <code class="language-plaintext highlighter-rouge">KeycloakController</code> pod adresem <code class="language-plaintext highlighter-rouge">api/keycloak/config</code>. BÄ™dzie ona miaÅ‚a postaÄ‡:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"authServerUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8180/auth"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"realm"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SpringBootAngular"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SpringBootAngularClient"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"requiredUserRole"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user_role"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"credentials"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"secret"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;SECRET&gt;"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="uwierzytelnianie-na-frontendzie">Uwierzytelnianie na frontendzie</h2>

<h3 id="zaleÅ¼noÅ›ci-1">ZaleÅ¼noÅ›ci</h3>

<p>Po stronie aplikacji frontendowej wykorzystamy bibliotekÄ™ <code class="language-plaintext highlighter-rouge">keycloak-angular</code> <a href="https://github.com/mauriciovigolo/keycloak-angular#readme">(link)</a>.</p>

<p>W <code class="language-plaintext highlighter-rouge">package.json</code> dodamy zaleÅ¼noÅ›ci:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"keycloak-angular"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^7.0.1"</span><span class="err">,</span><span class="w">
</span><span class="nl">"keycloak-js"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^6.0.1"</span><span class="w">
</span></code></pre></div></div>

<h3 id="pobranie-konfiguracji-z-backendu">Pobranie konfiguracji z backendu</h3>

<p>KonfiguracjÄ™ pobierzemy uderzajÄ…c na endpoint backendu.<br />
Przy pierwszym pobraniu konfiguracji z <code class="language-plaintext highlighter-rouge">KeycloakConfigService</code> zostanie wykonany request, a wynik zostanie zapisany. Kolejne pobrania konfiguracji bÄ™dÄ… juÅ¼ zwracaÄ‡ zapisanÄ… konfiguracjÄ™.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span><span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">KeycloakConfigService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nx">config</span><span class="p">:</span> <span class="nx">KeycloakConfig</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">HttpClient</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="nx">getConfig</span><span class="p">():</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">KeycloakConfig</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">of</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">configObservable</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">KeycloakConfig</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/keycloak/config</span><span class="dl">'</span><span class="p">);</span>
            <span class="nx">configObservable</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">config</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="nx">config</span><span class="p">);</span>
            <span class="k">return</span> <span class="nx">configObservable</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="konfiguracja-1">Konfiguracja</h3>

<p>PobranÄ… konfiguracjÄ™ wykorzystamy w injection tokenie, definiujÄ…c w <code class="language-plaintext highlighter-rouge">app.module.ts</code> provider dla tokenu <a href="https://angular.io/api/core/APP_INITIALIZER"><code class="language-plaintext highlighter-rouge">APP_INITIALIZER</code></a>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="nl">provide</span><span class="p">:</span> <span class="nx">APP_INITIALIZER</span><span class="p">,</span>
    <span class="nx">useFactory</span><span class="p">:</span> <span class="nx">initializer</span><span class="p">,</span>
    <span class="nx">multi</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nx">deps</span><span class="p">:</span> <span class="p">[</span><span class="nx">KeycloakService</span><span class="p">,</span> <span class="nx">KeycloakConfigService</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Jako <code class="language-plaintext highlighter-rouge">initializer</code> utworzymy funkcjÄ™ wykorzystujÄ…cÄ… nasz <code class="language-plaintext highlighter-rouge">KeycloakConfigService</code> oraz inicjalizujÄ…cÄ… <code class="language-plaintext highlighter-rouge">KeycloakService</code> z biblioteki <code class="language-plaintext highlighter-rouge">keycloak-angular</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">initializer</span><span class="p">(</span><span class="nx">keycloakService</span><span class="p">:</span> <span class="nx">KeycloakService</span><span class="p">,</span> <span class="nx">keycloakConfigService</span><span class="p">:</span> <span class="nx">KeycloakConfigService</span><span class="p">):</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="nx">keycloakConfigService</span><span class="p">.</span><span class="nx">getConfig</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
            <span class="nx">filter</span><span class="p">(</span><span class="nx">config</span> <span class="o">=&gt;</span> <span class="nx">config</span><span class="p">.</span><span class="nx">enabled</span><span class="p">),</span>
            <span class="nx">flatMap</span><span class="p">(</span><span class="nx">config</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">keycloakService</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
                    <span class="na">config</span><span class="p">:</span> <span class="p">{</span>
                        <span class="na">url</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">authServerUrl</span><span class="p">,</span>
                        <span class="na">realm</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">realm</span><span class="p">,</span>
                        <span class="na">clientId</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">resource</span><span class="p">,</span>
                        <span class="na">credentials</span><span class="p">:</span> <span class="p">{</span>
                            <span class="na">secret</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">credentials</span><span class="p">.</span><span class="nx">secret</span>
                        <span class="p">}</span>
                    <span class="p">},</span>
                    <span class="na">initOptions</span><span class="p">:</span> <span class="p">{</span>
                        <span class="na">onLoad</span><span class="p">:</span> <span class="dl">'</span><span class="s1">check-sso</span><span class="dl">'</span><span class="p">,</span>
                        <span class="na">checkLoginIframe</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">})).</span><span class="nx">toPromise</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="zabezpieczenie-routeÃ³w">Zabezpieczenie routeâ€™Ã³w</h3>

<p>Aby zabezpieczyÄ‡ routy, wykorzystamy <a href="https://angular.io/guide/router#guards"><code class="language-plaintext highlighter-rouge">Angular Route Guard</code></a>.<br />
Stworzymy <code class="language-plaintext highlighter-rouge">AppAuthGuard</code> rozszerzajÄ…c <code class="language-plaintext highlighter-rouge">KeycloakAuthGuard</code> oraz implementujÄ…c <a href="https://angular.io/api/router/CanActivate">canActivate</a>.</p>

<p>W konstruktorze pobierzemy konfiguracjÄ™ z <code class="language-plaintext highlighter-rouge">KeycloakConfigService</code>, aby zweryfikowaÄ‡ czy uwierzytelnianie jest wÅ‚Ä…czone (parametr <code class="language-plaintext highlighter-rouge">keycloak.enabled</code> w <code class="language-plaintext highlighter-rouge">application.yml</code>), oraz czy uÅ¼ytkownik posiada wymaganÄ… rolÄ™:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
    <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppAuthGuard</span> <span class="kd">extends</span> <span class="nx">KeycloakAuthGuard</span> <span class="p">{</span>
    <span class="nl">isAuthEnabled</span><span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nl">requiredUserRole</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">protected</span> <span class="nx">router</span><span class="p">:</span> <span class="nx">Router</span><span class="p">,</span> <span class="k">protected</span> <span class="nx">keycloakService</span><span class="p">:</span> <span class="nx">KeycloakService</span><span class="p">,</span> <span class="k">private</span> <span class="nx">keycloakConfigService</span><span class="p">:</span> <span class="nx">KeycloakConfigService</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">router</span><span class="p">,</span> <span class="nx">keycloakService</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">keycloakConfigService</span><span class="p">.</span><span class="nx">getConfig</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">config</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">isAuthEnabled</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">enabled</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">requiredUserRole</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">requiredUserRole</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">canActivate</span><span class="p">(</span><span class="nx">route</span><span class="p">:</span> <span class="nx">ActivatedRouteSnapshot</span><span class="p">,</span> <span class="nx">state</span><span class="p">:</span> <span class="nx">RouterStateSnapshot</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isAuthEnabled</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="nx">canActivate</span><span class="p">(</span><span class="nx">route</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span> <span class="k">as</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">isAccessAllowed</span><span class="p">(</span><span class="nx">route</span><span class="p">:</span> <span class="nx">ActivatedRouteSnapshot</span><span class="p">,</span> <span class="nx">state</span><span class="p">:</span> <span class="nx">RouterStateSnapshot</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">authenticated</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">keycloakService</span><span class="p">.</span><span class="nx">login</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">roles</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">requiredUserRole</span><span class="p">));</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>a nastÄ™pnie wykorzystamy naszego guarda w <code class="language-plaintext highlighter-rouge">app-routing.module.ts</code> do zabezpieczenia routa <code class="language-plaintext highlighter-rouge">protected</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">routes</span><span class="p">:</span> <span class="nx">Routes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
        <span class="na">component</span><span class="p">:</span> <span class="nx">PublicComponent</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">protected</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">component</span><span class="p">:</span> <span class="nx">ProtectedComponent</span><span class="p">,</span>
        <span class="na">canActivate</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppAuthGuard</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">];</span>
</code></pre></div></div>

<h2 id="testy">Testy</h2>

<h3 id="uruchomienie">Uruchomienie</h3>

<p>JeÅ›li mamy juÅ¼ uruchomiony serwer Keycloak, moÅ¼emy zbudowaÄ‡ aplikacje i obraz dockerowy, a nastÄ™pnie uruchomiÄ‡ kontener.</p>

<p>W tym celu w gÅ‚Ã³wnym folderze repozytorium najpierw budujemy aplikacje:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./gradlew build
</code></pre></div></div>

<p>po zbudowaniu tworzymy obraz dockerowy:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> michuu93/spring-angular-keycloak-demo <span class="nb">.</span>
</code></pre></div></div>

<p>a na koniec uruchamiamy kontener:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="nt">--name</span> spring-angular-keycloak-demo <span class="nt">--network</span> host michuu93/spring-angular-keycloak-demo
</code></pre></div></div>

<p>PoniewaÅ¼ zarÃ³wno aplikacje z wnÄ™trza kontenera, jak i my z przeglÄ…darki internetowej musimy mieÄ‡ dostÄ™p do serwera Keycloak pod tym samym adresem, nie wnikajÄ…c w zasadÄ™ dziaÅ‚ania sieci w dockerze uruchomiliÅ›my kontener z opcjÄ… <code class="language-plaintext highlighter-rouge">--network host</code>.</p>

<p>DziÄ™ki temu nie musimy wystawiaÄ‡ dodatkowo Å¼adnego proxy ani podmieniaÄ‡ hostÃ³w w naszym systemie. Jest to jednak uÅ‚atwienie na potrzeby demo i nie powinniÅ›my go wykorzystywaÄ‡ na produkcji.</p>

<h3 id="weryfikacja-dziaÅ‚ania-uwierzytelniania">Weryfikacja dziaÅ‚ania uwierzytelniania</h3>

<p>Po uruchomieniu moÅ¼emy sprawdziÄ‡ aplikacje w dziaÅ‚aniu!</p>

<p>Przechodzimy na stronÄ™ <a href="http://localhost:9082/">localhost:9082</a> i powinniÅ›my zobaczyÄ‡ aplikacjÄ™ frontendowÄ…, a dokÅ‚adniej <code class="language-plaintext highlighter-rouge">ToolbarComponent</code> oraz <code class="language-plaintext highlighter-rouge">PublicComponent</code>:</p>

<p><img src="/assets/img/posts/2020-02-01-keycloak-uwierzytelnianie-autoryzacja-springboot-angular/public_component_not_logged.png" alt="Public component" /></p>

<p>Do dyspozycji mamy menu, z ktÃ³rego moÅ¼emy przejÅ›Ä‡ do:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Public</code> - niezabezpieczonego route z <code class="language-plaintext highlighter-rouge">PublicComponent</code>;</li>
  <li><code class="language-plaintext highlighter-rouge">Protected</code> - zabezpieczonego route z <code class="language-plaintext highlighter-rouge">ProtectedComponent</code>;</li>
  <li><code class="language-plaintext highlighter-rouge">Keycloak Configuration</code> - niezabezpieczonego endpointu udostÄ™pniajÄ…cego konfiguacjÄ™ Keycloak z backendu;</li>
  <li><code class="language-plaintext highlighter-rouge">Backend Hello</code> - zabezpieczonego endpointu zwracajÄ…cego tekst <code class="language-plaintext highlighter-rouge">Hello from the Backend!</code>;</li>
  <li><code class="language-plaintext highlighter-rouge">Logout (backend)</code> - wylogowania z backendu;</li>
  <li><code class="language-plaintext highlighter-rouge">Logout (frontend)</code> - przycisk widoczny tylko po zalogowaniu na frontendzie, ktÃ³ry wylogowuje nas z frontendu.</li>
</ul>

<p>SprawdÅºmy wiÄ™c czy mamy dostÄ™p do <code class="language-plaintext highlighter-rouge">Keycloak Configuration</code> bez zalogowania:
<img src="/assets/img/posts/2020-02-01-keycloak-uwierzytelnianie-autoryzacja-springboot-angular/keycloak_config.png" alt="Keycloak Configuration" /></p>

<p>WyglÄ…da na to, Å¼e publicznie dostÄ™pny route i endpoint api, dziaÅ‚ajÄ… poprawnie.</p>

<p>JeÅ›li teraz przejdziemy do <code class="language-plaintext highlighter-rouge">Protected</code>, zostaniemy przekierowani na stronÄ™ logowania Keycloak:</p>

<p>http://localhost:8180/auth/realms/<strong>SpringBootAngular</strong>/protocol/<strong>openid-connect</strong>/auth?client_id=<strong>SpringBootAngularClient</strong>&amp;redirect_uri=<strong>http%3A%2F%2Flocalhost%3A9082%2F%23%2F</strong>&amp;state=3e007783-4772-48dd-8b31-4bfe3cc9c42c&amp;response_mode=fragment&amp;response_type=code&amp;scope=openid&amp;nonce=023ab545-32dc-4bdc-9cbf-12cad1d0c944</p>

<p><img src="/assets/img/posts/2020-02-01-keycloak-uwierzytelnianie-autoryzacja-springboot-angular/keycloak_login.png" alt="Keycloak login" /></p>

<p>Jak widzimy, adres zawiera informacje, takie jak nazwa protokoÅ‚u, realm, client czy adres, na ktÃ³ry mamy zostaÄ‡ przekierowani po zalogowaniu.</p>

<p>JeÅ›li zalogujemy siÄ™ uÅ¼ytkownikiem posiadajÄ…cym rolÄ™ <code class="language-plaintext highlighter-rouge">user_role</code> (<code class="language-plaintext highlighter-rouge">user:password</code>), to zostaniemy przekierowani z powrotem do naszej aplikacji:</p>

<p><img src="/assets/img/posts/2020-02-01-keycloak-uwierzytelnianie-autoryzacja-springboot-angular/public_component_logged.png" alt="Public component" /></p>

<p>Dodatkowo mamy jeszcze tylko przycisk <code class="language-plaintext highlighter-rouge">Logout (frontend)</code>. JesteÅ›my teraz zalogowani, wiÄ™c moÅ¼emy przejÅ›Ä‡ do <code class="language-plaintext highlighter-rouge">Protected</code>:</p>

<p><img src="/assets/img/posts/2020-02-01-keycloak-uwierzytelnianie-autoryzacja-springboot-angular/protected_component.png" alt="Protected component" /></p>

<p>ZadziaÅ‚a rÃ³wnieÅ¼ <code class="language-plaintext highlighter-rouge">Backend Hello</code>:</p>

<p><img src="/assets/img/posts/2020-02-01-keycloak-uwierzytelnianie-autoryzacja-springboot-angular/backend_hello.png" alt="Backend Hello" /></p>

<p>JeÅ›li wylogujemy siÄ™ teraz z frontendu - <code class="language-plaintext highlighter-rouge">Logout (frontend)</code>, to zniknie przycisk <code class="language-plaintext highlighter-rouge">Logout (frontend)</code> i nie bÄ™dziemy mieli juÅ¼ dostÄ™pu do <code class="language-plaintext highlighter-rouge">Protected</code>.<br />
CaÅ‚y czas jednak bÄ™dziemy mieli dostÄ™p do <code class="language-plaintext highlighter-rouge">Backend Hello</code>. Dopiero kiedy wylogujemy siÄ™ z backendu - <code class="language-plaintext highlighter-rouge">Logout (backend)</code>, to stracimy dostÄ™p do <code class="language-plaintext highlighter-rouge">Backend Hello</code>.<br />
Jednak jeÅ›li bÄ™dÄ…c zalogowanym uÅ¼ytkownikiem, wylogujemy siÄ™ z backendu a nie frontendu, to automatycznie zostaniemy rÃ³wnieÅ¼ wylogowani z frontendu.</p>

<p>Dlaczego?</p>

<p>O tym jak dziaÅ‚a Keycloak i tokeny, ktÃ³rymi siÄ™ posÅ‚ugujemy (a dokÅ‚adniej standard OpenID Connect) nie jest tematem tego wpisu. Co do kwestii wylogowywania, to temat (ze wzglÄ™du na zÅ‚oÅ¼onoÅ›Ä‡ implementacji) nadaje siÄ™ na osobny wpis, szczegÃ³lnie gdy mÃ³wimy o rozproszonych systemach z wieloma instancjami aplikacji, stojÄ…cymi za loadbalancerem.</p>

<p>Projekt demo posiada bardzo prosty mechanizm wylogowywania.</p>

<p>Wylogowanie z frontendu wywoÅ‚a metodÄ™ <code class="language-plaintext highlighter-rouge">logout</code> na serwisie biblioteki <code class="language-plaintext highlighter-rouge">keycloak-angular</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">logout</span> <span class="o">=</span> <span class="k">async</span> <span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">keycloakService</span><span class="p">.</span><span class="nx">logout</span><span class="p">();</span>
</code></pre></div></div>

<p>Natomiast wylogowanie z backendu uderzy na <code class="language-plaintext highlighter-rouge">/api/logout</code>, co spowoduje wykonanie na backendzie:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fun</span> <span class="nf">logout</span><span class="o">(</span><span class="nl">request:</span> <span class="nc">HttpServletRequest</span><span class="o">,</span> <span class="nl">response:</span> <span class="nc">HttpServletResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">request</span><span class="o">.</span><span class="na">logout</span><span class="o">()</span>
    <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Na koniec sprawdÅºmy jeszcze uÅ¼ytkownika bez roli <code class="language-plaintext highlighter-rouge">user_role</code> (<code class="language-plaintext highlighter-rouge">user2:password2</code>).</p>

<p>Po zalogowaniu, w aplikacji powinniÅ›my zobaczyÄ‡ te same przyciski w menu, co na uÅ¼ytkowniku posiadajÄ…cym wymaganÄ… rolÄ™.<br />
Jest tak, poniewaÅ¼ ukrywanie przyciskÃ³w uzaleÅ¼niliÅ›my tylko od tego, czy uÅ¼ytkownik jest zalogowany, a nie czy ma uprawnienia do routa:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ngOnInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">keycloakService</span><span class="p">.</span><span class="nx">isLoggedIn</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">isLogged</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">isLogged</span> <span class="o">=</span> <span class="nx">isLogged</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Uderzenie na <code class="language-plaintext highlighter-rouge">Backend Hello</code> rÃ³wnieÅ¼ nie zadziaÅ‚a.</p>

<p>Uwierzytelnianie moÅ¼emy bardzo szybko wyÅ‚Ä…czyÄ‡ w obu aplikacjach, ustawiajÄ…c <code class="language-plaintext highlighter-rouge">keycloak.enabled</code> w <code class="language-plaintext highlighter-rouge">application.yml</code> na <code class="language-plaintext highlighter-rouge">false</code>.<br />
MoÅ¼e byÄ‡ to przydatne np. na Å›rodowiskach testowych.</p>

<h2 id="na-zakoÅ„czenie">Na zakoÅ„czenie</h2>

<p>Mam nadziejÄ™, Å¼e udaÅ‚o mi siÄ™ w przystÄ™pny sposÃ³b przedstawiÄ‡ integracjÄ™ aplikacji z serwerem Keycloak.</p>

<p>Nie jest to jedyny sposÃ³b implementacji, jeÅ›li nasza aplikacja ma byÄ‡ bardziej elastyczna, moÅ¼emy wykorzystaÄ‡ implementacjÄ™ standardu OAuth2 przy uÅ¼yciu <code class="language-plaintext highlighter-rouge">Spring Security</code>. DziÄ™ki temu nie uzaleÅ¼nimy siÄ™ od serwera Keycloak i w przyszÅ‚oÅ›ci bÄ™dziemy mogli Å‚atwiej zamieniÄ‡ go na inny serwer uwierzytelniania/autoryzacji.</p>

<p>Keycloak wystawia endpointy pod ktÃ³rymi udostÄ™pnia konfiguracjÄ™ <a href="https://www.keycloak.org/docs/4.8/server_admin/#keycloak-server-oidc-uri-endpoints">(link)</a>.<br />
Znajdziemy je w <code class="language-plaintext highlighter-rouge">Realm Settings &gt; General &gt; Endpoints</code>, np. dla standardu OpenID Connect bÄ™dzie to w naszym przypadku:<br />
<a href="http://127.0.0.1:8180/auth/realms/SpringBootAngular/.well-known/openid-configuration">http://127.0.0.1:8180/auth/realms/SpringBootAngular/.well-known/openid-configuration</a><br />
MogÄ… byÄ‡ one przydatne, jeÅ›li aplikacja nie wykorzystuje adapterÃ³w Keycloak do poÅ‚Ä…czenia z serwerem.</p>

<p>Nie musimy teÅ¼ wykorzystywaÄ‡ logowania do aplikacji przez przeglÄ…darkÄ™ - moÅ¼emy wykorzystaÄ‡ Keycloaka do uwierzytelniania aplikacji miÄ™dzy sobÄ…, np. kiedy integrujemy ze sobÄ… rÃ³Å¼ne moduÅ‚y. Wtedy przydatna bÄ™dzie opcja <code class="language-plaintext highlighter-rouge">bearer-only</code> w konfiguracji clienta.</p>
:ET