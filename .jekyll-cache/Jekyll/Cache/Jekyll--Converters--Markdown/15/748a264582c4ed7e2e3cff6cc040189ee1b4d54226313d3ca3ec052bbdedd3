I"dy<p>Pisząc aplikacje z wykorzystaniem Angulara mamy styczność z obiektami typu Observable. Na pewno zdarzyło Ci się użyć serwisu HttpClient do pobierania danych z serwera albo EventEmittera do komunikacji komponentów rodzic-dziecko. W każdym z tych przypadków użycia masz do czynienia z obiektem Observable. Czy zastanawiałeś się nad tym, czym w zasadzie jest ten typ obiektu, dlaczego musisz go zasubskrybować, aby otrzymać dane? A może już to wiesz, ale chciałbyś dowiedzieć się jak efektywniej wykorzystać bibliotekę RxJS?</p>

<p>Jeżeli tak, to ten artykuł jest dla Ciebie!</p>

<h2 id="czym-jest-rxjs">Czym jest RxJS?</h2>
<p><em>Reactive Extensions for JavaScript (RxJS)</em> jest biblioteką ułatwiającą programowanie reaktywne w języku JavaScript. Dzięki tej bibliotece i komponentom, jakie udostępnia tworzenie asynchronicznych programów jest intuicyjne i proste - zaraz przekonasz się jak bardzo!</p>

<h2 id="strumień-danych">Strumień danych</h2>
<p>Zacznijmy jednak od podstaw. Czym jest strumień danych w programowaniu reaktywnym? Według definicji, jest on sekwencją danych dostępnych w danym okresie. Taką sekwencję możemy obserwować oraz pobrać z niej potrzebne nam obiekty lub wartości. Dane natomiast mogą pojawić się w każdym momencie jego życia, a o ich pojawieniu się jesteśmy powiadamiani callbackiem (czyli funkcją odwrotną wywoływaną przez strumień). Istnieją dwa typy strumieni - zimny i ciepły.</p>
<h3 id="strumień-zimny">Strumień zimny</h3>
<p>Strumień zimny nie będzie emitować (produkować) danych aż do momentu, gdy ktoś (obserwator) zacznie go obserwować. Wyemituje odrębną wartość dla każdego nowego obserwatora - te wartości nie są współdzielone. Przykładowo: wysłanie żądania GET do serwera.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">httpClient</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">ServerResponse</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">someUrl</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>
<h3 id="strumień-ciepły">Strumień ciepły</h3>
<p>Strumień ciepły, w przeciwieństwie do zimnego, emituje dane niezależnie od tego, czy ktoś na niego nasłuchuje. Każdy obserwator operuje na współdzielonym zasobie danych - dwóch obserwatorów otrzyma tą samą wartość w momencie wyemitowania danej przez strumień. Przykładowo: wydarzenia ‘click’</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">fromEvent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">rxjs</span><span class="dl">'</span><span class="p">;</span>
 
<span class="nx">fromEvent</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="observable-wzorzec-obserwator">Observable, wzorzec Obserwator</h2>
<p>Mając już wiedzę czym jest strumień i z jakimi rodzajami strumieni możemy się spotkać, warto przejść do opisania podstawowego konceptu RxJS: Observable.
Observable jest obiektem reprezentującym strumień danych. Implementuje wzorzec projektowy <em>Obserwator</em>, który zakłada istnienie bytu przechowującego listę obiektów - obserwatorów, nasłuchujących na jakiekolwiek zmiany stanu danego bytu, powiadamiającego każdego z nich o zmianie poprzez wywołanie funkcji przez nich przekazanych (callback).</p>

<p>Najprostszego Observable możemy stworzyć za pomocą funkcji statycznej <em>of</em>.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// obiekt Observable, emitujący wartości liczbowe od 1 do 5</span>
<span class="kd">const</span> <span class="nx">numbers$</span><span class="p">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">of</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>

</code></pre></div></div>
<p>Obiekt numbers$ jest definicją strumienia danych typu <em>number</em>. Jest to tylko i wyłącznie szablon strumienia. W tym przypadku stworzyliśmy strumień zimny. Znamy zbiór danych (1,2,3,4,5), jednak dane zaczną być emitowane dopiero w momencie rozpoczęcia nasłuchiwania na dany strumień przez obserwatora. Pod strumień ‘podłączamy’ się za pomocą funkcji subscribe().</p>
<h3 id="subscribe-i-unsubscribe">subscribe() i unsubscribe()</h3>
<p>Funkcja subscribe jako parametr oczekuje obiektu, który definiuje trzy funkcje: <em>next</em>, <em>error</em> oraz <em>complete</em>.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">subscription</span> <span class="o">=</span> <span class="nx">numbers$</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">({</span>
    <span class="nx">next</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{},</span>
    <span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{},</span>
    <span class="nx">complete</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">});</span>
</code></pre></div></div>
<p>Każda z tych funkcji jest <em>callbackiem</em>, który jest wywoływany w poszczególnych momentach przepływu danych przez strumień. Funkcja <em>next(value)</em> wywoływana jest za każdym razem, gdy strumień emituje pojedynczą wartość - czyli w naszym przypadku funkcja <em>next()</em> zostanie wywołana 5-krotnie, po razie dla każdej z cyfr z zakresu 1-5. Callback <em>error(err)</em> zostanie wywołany w momencie, gdy strumień zostanie nienaturalnie zamknięty lub przerwany. <em>Complete</em> jest ostatnim callbackiem, który wywoływany jest po zamknięciu strumienia.</p>

<p>Wywołanie funkcji <em>subscribe()</em> dopisuje nas do listy obserwatorów danego strumienia.</p>

<p>W momencie podpięcia się jako obserwator do danego Observable zostaje przekazany nam obiekt typu Subscription, na którym możemy wywołać metodę <em>unsubscribe()</em>, która usunie nas z listy obserwatorów.</p>

<p>Odsubskrybowanie się jest bardzo ważne w przypadku strumieni gorących, które w większości przypadków są nieskończone - emitują wartość przez potencjalnie nieskończoną ilość czasu. Jeżeli zapomnimy o usunięciu nas z listy obserwatorów danego strumienia, referencja do stworzonego przez nas obserwatora będzie istnieć przez cały cykl życia aplikacji - tworząc nieskończoną dziurę w pamięci, która w sytuacji ekstremalnej może doprowadzić do zabicia karty, w której działa nasza aplikacja.</p>
<h2 id="subject---tworzenie-własnych-strumieni">Subject - tworzenie własnych strumieni</h2>
<p>RxJS oferuje nam również możliwość tworzenia własnych strumieni. Możemy to zrobić za pomocą obiektów typu Subject. Subject, tłumacząc na język polski, oznacza dosłownie: <em>temat</em>. Taki strumień jest więc tematem, potencjalnie nieskończonym, który emituje nowe wartości w kluczowych dla nas miejscach aplikacji. 
Subject możemy stworzyć bardzo prosto - jak każdy inny obiekt:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">subject$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Subject</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">();</span>
</code></pre></div></div>
<p>Do danego strumienia możemy teraz się subskrybować jako obserwatorzy:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">subject$</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">subscribe</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">value from subject$: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">))</span>
</code></pre></div></div>
<p>Zmienna <em>subject$</em> oferuje nam teraz metodę <em>next(value: number)</em>, dzięki której możemy rozesłać wszystkim obserwatorom nową wartość liczbową, w taki sposób:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">subject$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="c1">// value from subject$: 5</span>
</code></pre></div></div>
<p>Strumień, jaki teraz stworzyliśmy jest strumieniem nieskończonym, więc musimy pamiętać o odsubskrybowaniu się po zakończeniu nasłuchiwania! Możemy również zamknąć strumień wywołując metodę <em>complete()</em>.</p>

<p>Wyemitowaliśmy w powyższym przykładzie wartość numeryczną ‘5’, którą otrzymał pojedynczy obserwator. Jeżeli w momencie emisji nowej wartości nie istniałby żaden obserwator, to wartość ta przepadła by na wieki. Jest to dosyć smutne. Co w przypadku, gdy ta wartość jest dla nas ważna i nie chcemy jej stracić? Na szczęście z pomocą przychodzą nam specyficzne obiekty rozszerzające typ Subject.</p>
<h3 id="replaysubject">ReplaySubject</h3>
<p>ReplaySubject jest strumieniem, który dla każdego nowego obserwatora odtwarza N ostatnio emitowanych danych. Wartość N możemy przekazać w konstruktorze tego obiektu, o tak:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">replaySubject$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReplaySubject</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</code></pre></div></div>
<p>Jeżeli wcześniej przez ten strumień emitowane były wartości, to przy subskrypcji, zostaną one odtworzone danemu obserwatorowi, ale nie więcej niż 5 ostatnich. Przykładowo:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">replaySubject$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">replaySubject$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">replaySubject$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">replaySubject$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="nx">replaySubject$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="nx">replaySubject$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
<span class="nx">replaySubject$</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">replayedValue</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">replayedValue</span><span class="p">));</span>
<span class="c1">// 2</span>
<span class="c1">// 3</span>
<span class="c1">// 4</span>
<span class="c1">// 5</span>
<span class="c1">// 6</span>
</code></pre></div></div>
<h3 id="behaviorsubject">BehaviorSubject</h3>
<p>BehaviorSubject jest specyficznym rodzajem strumienia. Zawsze posiada on wartość, gdyż jest ona wymagana przy tworzeniu danego obiektu. Ponadto, strumień ten zawsze przechowuje ostatnio emitowaną wartość i podobnie jak w przypadku ReplaySubject, odtwarza ją każdemu nowemu obserwatorowi.
Tworzymy go w równie prosty sposób:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">behaviorSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="nx">behaviorSubject</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>
<span class="c1">// true</span>
<span class="nx">behaviorSubject</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
<span class="nx">behaviorSubject</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">drugi obserwator: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">value</span><span class="p">))</span>
<span class="c1">// false</span>
<span class="c1">// drugi obserwator: false</span>
</code></pre></div></div>
<p>Teraz, każdy nowy obserwator otrzyma obecnie przechowywaną przez dany strumień wartość - logiczną wartość ‘true’.</p>
<h3 id="asyncsubject">AsyncSubject</h3>
<p>AsyncSubject jest specyficznym strumieniem, ponieważ wyemituję on ostatnią wartość przekazaną w funkcji next() dopiero po zamknięciu tego strumienia, czyli po wywołaniu na nim funkcji complete(). Po zamknięciu przechowuje on wyemitowaną wartość i wyemituję ją każdemu nowemu obserwatorowi, który spóźnił się z subskrypcją przed zamknięciem strumienia.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">asyncSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AsyncSubject</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">();</span>
<span class="nx">asyncSubject</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">wartosc z async subject: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">value</span><span class="p">))</span>
<span class="nx">asyncSubject</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">asyncSubject</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">asyncSubject</span><span class="p">.</span><span class="nx">complete</span><span class="p">();</span>
<span class="c1">// wartosc z async subject: 2</span>
<span class="nx">asyncSubject</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">().</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">wartosc z async subject po zamknieciu strumienia: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">value</span><span class="p">))</span>
<span class="c1">// wartosc z async subject po zamknieciu strumienia: 2</span>
</code></pre></div></div>
<h2 id="rxjs-operatory---operacje-na-strumieniu">RxJS operatory - operacje na strumieniu</h2>
<p>Poznaliśmy różne sposoby tworzenia strumieni, co jeśli emitowane dane za każdym razem chcielibyśmy zmodyfikować pod nasz konkretny przypadek biznesowy? Z pomocą oczywiście przychodzi nam RxJS z szerokim wachlarzem operatorów, czyli funkcji operujących na naszym strumieniu. Poniżej przedstawię Ci parę z nich, które uważam za bardzo przydatne w codziennej pracy.</p>

<p>Załóżmy, że operujemy na następującym strumieniu:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">strumien$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">15</span><span class="nx">_000</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">observable$</span> <span class="o">=</span> <span class="nx">strumien$</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">();</span>
</code></pre></div></div>
<p>Strumień domyślnie emituje wartość liczbową ‘15000’.
Możemy operować na danych produkowanych przez nasz strumień, przekazując potrzebne nam operatory jako argumenty funkcji <em>pipe()</em> wywołanej na observable$.</p>
<h3 id="map">map</h3>
<p>Map jest z pewnością znanym Ci operatorem, chociażby z API JS Arrays.map, którym RxJS się sugerował. Map transformuje dane zwracając nam nowy wynik dla każdej emitowanej danej. Przykładowo:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">observable$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">map</span><span class="p">(</span><span class="nx">numerek</span> <span class="o">=&gt;</span> <span class="nx">numerek</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">zmapowana wartosc: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">))</span>
<span class="c1">// zmapowana wartosc: 30000</span>
</code></pre></div></div>

<h3 id="first">first</h3>
<p>Interesującym operatorem jest operator <em>first()</em>, który pobiera pierwszy element ze strumienia, następnie jako efekt uboczny - wypisuje obserwatora z listy obserwujących dany strumień! Jest to bardzo wygodne, jeżeli z danego gorącego strumienia potrzebujemy tylko jednej wartości - nie musimy przejmować się w tym momencie wywołaniem funkcji unsubscribe().
Przykład:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">observable$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">first</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">pierwsza otrzymana wartosc: </span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">))</span>
<span class="c1">// pierwsza otrzymana wartosc: 15000</span>
<span class="nx">strumien$</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="mi">25000</span><span class="p">);</span>
<span class="c1">// nic sie nie stalo, observable$ odpisal sie z listy obserwatorow</span>
</code></pre></div></div>
<h3 id="withlatestfrom">withLatestFrom</h3>
<p>Następnym operatorem wartym uwagi jest <em>withLatestFrom</em>, który umożliwia nam ‘skrzyżowanie strumieni’, czyli dołączenie do jednego strumienia ostatnio emitowanej wartości przez drugi strumień. Przykładowo:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">otherStream$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviourSubject</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="nx">observable$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">withLatestFrom</span><span class="p">(</span><span class="nx">otherStream$</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">subscribe</span><span class="p">(([</span><span class="nx">value</span><span class="p">,</span> <span class="nx">otherStreamValue</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">otrzymana wartosc z pierwszego strumienia: {}, z drugiego: {}</span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">otherStreamValue</span><span class="p">))</span>
<span class="c1">// otrzymana wartosc z pierwszego strumienia: 15000, z drugiego: true</span>
</code></pre></div></div>
<h3 id="takeuntil">takeUntil</h3>
<p>Operator takeUntil jest wygodnym operatorem, jeżeli chcemy w przejrzysty i prosty sposób wypisać się z listy obserwujących dany strumień.
Rzućmy okiem na kod:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app-some-component</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="s2">`</span><span class="err">
        some template
  </span><span class="s2">`</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">some-styles.scss</span><span class="dl">'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SomeComponent</span> <span class="k">implements</span> <span class="nx">OnDestroy</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nx">destroySubject$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Subject</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span><span class="p">();</span>
    <span class="k">private</span> <span class="nx">someValues$</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviourSubject</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">initial value</span><span class="dl">'</span><span class="p">);</span>
    
    <span class="nx">ngOnInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
       <span class="k">this</span><span class="p">.</span><span class="nx">someValues$</span><span class="p">.</span><span class="nx">asObservable</span><span class="p">().</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">takeUnitl</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">destroySubject$</span><span class="p">))</span>
            <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="p">...)</span>
    <span class="p">}</span>

    <span class="nx">ngOnDestroy</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
       <span class="k">this</span><span class="p">.</span><span class="nx">destroySubject</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
    <span class="p">}</span>   

<span class="p">}</span>
</code></pre></div></div>
<p>Powyższy fragment przedstawia nam SomeComponent, który nasłuchuje na wartości ze strumienia <em>someValues$</em> aż do momentu, gdy zostanie wyemitowana wartość z drugiego strumienia: <em>destroySubject$</em>. W taki oto sposób nie musimy pamiętać o ręcznym odsubskrybowaniu się z pierwszego strumienia, gdyż zostanie on automatycznie zamknięty w momencie zniszczenia komponentu przez Angulara. :)</p>
<h3 id="switchmap">switchMap</h3>
<p>Kolejnym przydatnym operatorem może być <em>switchMap()</em>, którego zastosowanie pozwala nam zachować czystość i powstrzyma nas przed tworzeniem tzw. <em>callback hell</em>, czyli zagnieżdżania wywołań <em>subscribe()</em> tworzących łańcuch wywołań trudny w czytaniu i utrzymywaniu. Dlatego też zamiast pisać:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">observable$</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span>
    <span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">someService</span><span class="p">.</span><span class="nx">processValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">someServiceResponse</span> <span class="o">=&gt;</span> <span class="nx">andYetAnotherService</span><span class="p">.</span><span class="nx">processAnotherValue</span><span class="p">(</span><span class="nx">someServiceResponse</span><span class="p">)</span>
                <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">yetAnotherResponse</span> <span class="o">=&gt;</span> <span class="nx">veryImportantService</span><span class="p">.</span><span class="nx">processVeryImportantValue</span><span class="p">(</span><span class="nx">yetAnotherResponse</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">veryImportantResponse</span> <span class="o">=&gt;</span> <span class="p">...))))</span>
</code></pre></div></div>
<p>Każdy z serwisów zwraca Observable do strumienia, z którego potrzebujemy wartości do wywołania kolejnego serwisu. Możemy zamiast tego napisać:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">observable$</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">someService</span><span class="p">.</span><span class="nx">processValue</span><span class="p">(</span><span class="nx">value</span><span class="p">)),</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">someServiceResponse</span> <span class="o">=&gt;</span> <span class="nx">andYetAnotherService</span><span class="p">.</span><span class="nx">processAnotherValue</span><span class="p">(</span><span class="nx">someServiceResponse</span><span class="p">)),</span>
    <span class="nx">switchMap</span><span class="p">(</span><span class="nx">yetAnotherResponse</span> <span class="o">=&gt;</span> <span class="nx">veryImportantService</span><span class="p">.</span><span class="nx">processVeryImportantValue</span><span class="p">(</span><span class="nx">yetAnotherResponse</span><span class="p">)))</span>
        <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">veryImportantResponse</span> <span class="o">=&gt;</span> <span class="p">...)</span>
</code></pre></div></div>
<p>SwitchMap automatycznie subskrybuje nas do kolejnego strumienia, przez co kod staje się czytelniejszy.
Oczywiście zagnieżdżanie strumieni i tak wprowadza narzut przeszkadzający w szybkim zrozumieniu, co dany kod produkuje, lecz jest to bardziej eleganckie podejście.</p>
<h3 id="więcej-operatorów">Więcej operatorów</h3>
<p>Aby poznać więcej operatorów polecam stronę <a href="https://www.learnrxjs.io/operators">learnrxjs</a>, która świetnie opisuje interesujące operatory udostępnione w bibliotece RxJS.</p>

<h2 id="podsumowanie">Podsumowanie</h2>
<p>RxJS jest potężnym narzędziem dającym wiele możliwości napisania kodu, który będzie reaktywny, asynchroniczny i intuicyjny dla czytającego go kolegi lub koleżanki z zespołu. Mam nadzieję, że będziesz kontynuować swoją przygodę z programowaniem reaktywnym i będziesz móc przekuć zebraną przy czytaniu tego artykułu wiedzę w kod asynchroniczny, napawający Cię dumą!</p>
:ET